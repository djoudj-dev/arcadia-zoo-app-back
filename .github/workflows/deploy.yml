name: Deploy NestJS App to Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.12]

    steps:
      # Étape 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      # Étape 2 : Installer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Installation des dépendances avec npm clean-install
      - name: Install dependencies
        run: npm ci

      # Audit de sécurité
      - name: Audit
        run: npm audit

      # Vérification de la signature des audits
      - name: Audit Signature
        run: npm audit signatures

      # Tests
      - name: Test
        run: npm run test

      # Création du fichier .env
      - name: Create environment file
        run: |
          echo "Creating .env file..."
          echo "NODE_ENV=production" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=15m" >> .env
          echo "JWT_REFRESH_EXPIRES_IN=7d" >> .env
          echo "POSTGRESQL_ARCADIA_URL=${{ secrets.POSTGRESQL_ARCADIA_URL }}" >> .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> .env

      # Build
      - name: Build
        run: npm run build

      # Étape 4 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 5 : Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD1 }}

      # Étape 6 : Construire et pousser l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/arcadia-zoo-app-back:latest
            ${{ secrets.DOCKER_USERNAME }}/arcadia-zoo-app-back:${{ github.sha }}
